var tipuesearch = {"pages": [{'title': 'Week', 'text': 'week2-5 \n week6-9 \n week10-14 \n week15-18 \n', 'tags': '', 'url': 'Week.html'}, {'title': 'week2-5', 'text': 'week2 \n 建立個人的 cad2019倉儲 \n 影片網址: https://youtu.be/rkhGfvRbUt4 \n \n \n week3 \n Solvespace 編譯 \n 1. 先將 E:\\portablegit\\bin\\sh.exe 改名為 sh_rename_for_solvespace.exe \n 2.git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace \n 3.編輯cmakelist內之713及714行\xa0 \xa0(加入#字號) \n 4.cd solvespace>cd extlib>cd libpng>mkdir build>cd build \n 5.執行這個指令cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make \n 6.接下來需要進行 libpng.dll.a 的編譯, 並改名為 libpng_static.a \n 7.將還需要增加的檔案複製到tmp/solvespace/build/bin \n 8.在一次執行cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make，將最後需要的東西補上。 \n 影片網址: https://youtu.be/HP_FiP3hAts \n \n wee4 \n 自主練習 \n wee5 \n Solvespace 的簡單操作 \n 練習老師給的編號3的工件 \n 影片網址: https://youtu.be/ChDmSAdeyMo \n \n \n \n', 'tags': '', 'url': 'week2-5.html'}, {'title': 'week6-9', 'text': 'week6 \n Solvespace繪製雙輪自走車 \n 1.繪製車身 \n 2.繪製輪胎 \n 3.車體組裝 \n 影片網址: https://youtu.be/GQ4JLwFPZGI \n \n 網際V-rep模型控制 \n 影片網址: https://youtu.be/Q3swpNTDmxk \n \n week7 \n Solvespace加入學號 \n 影片網址: https://www.youtube.com/watch?v=pQPMRe8Jl8U \n \n Solvespace繪圖驗證 \n 第一張圖 \n 影片網址: https://www.youtube.com/watch?v=2GCNcJ7J2ko \n \n week8 \n 導入Webots \n 影片網址: https://youtu.be/vuIHMrQgIiM \n \n 網誌開啟 \n 影片網址: https://youtu.be/9EOU3e9B8_4 \n \n 以SSH對Github連線 \n finish \n \xa0 \n', 'tags': '', 'url': 'week6-9.html'}, {'title': 'week10-14', 'text': 'week10 \n NX 與 Solidworks的差異 \n 1.文件格式:NX的文件格式為.prt；SolidWorks的文件格式為.sldprt。 \n 2.建立草圖方式:NX分為草圖和在任務環境中繪製草圖；SolidWorks分為草圖繪製和3D草圖。 \n 3.草圖平面:NX在創建草圖時會提示你是選擇現有平面還是創建平面；而SolidWorks是直接選擇平面，如果想選擇創建的平面就需要提前創建。 \n 4.參數化:NX分為尺寸約束和幾何約束。繪製草圖時也應該儘量做到完全約束。如果欠約束，NX會告訴你欠幾個約束。如果過約束，NX也會提示。SolidWorks的說法是定義，也需要添加幾何關係，其實道理是一樣的，如果欠定義的話，線的顯示顏色不一樣，但不顯示欠幾個定義。不欠定義的話就是完全定義。 \n 5.快速約束的方式。如下圖，在NX中連續單擊線1，線2，會出現一個臨時的約束工具條，選擇需要的約束即可。 \n \n sodiworks的繪圖練習 \n 影片網址: https://www.youtube.com/watch?v=0mVgqw164PI \n \n \n \n week12 \n NX第8章翻譯結果練習 \n 影片網址: https://youtu.be/9tC1mZya2_E \n \n \n week13 \n 13周之前的內容簡報 \n 影片網址: https://www.youtube.com/watch?v=HHE8XSvZRXU \n \n webot tutorial - 1 \n 影片網址: https://youtu.be/gQuszM7lGB8 \n \n \n', 'tags': '', 'url': 'week10-14.html'}, {'title': 'week15-18', 'text': 'week15 \n 學習個人成果回報 \n 以一個三分鐘的影片來記錄之前的進度 \n 影片網址: https://youtu.be/eT-i_oYouj4 \n \n week16 \n week16查驗 \n 將越野車零組件導入vrep \n 操作影片: https://www.youtube.com/watch?v=blJILUWKwf8 \n \n 將越野車零組件導入webot \n 影片網址: https://www.youtube.com/watch?v=uPCe-5qKRA0 \n \n \n week17 \n 各分組協同製作題 \n Building a clean model tutorial \n A model bounding box appeared, encompassing the whole robot.  出現了一個模型包圍盒，包圍了整個機器人。 \n The bounding box however appears to be too large: this is because the bounding box also encompasses the invisible items, such as the joints. 但是，邊界框似乎太大：這是因為邊界框還包含不可見的項，例如關節。 \n We could do the same procedure for all invisible items in our model. 我們可以對模型中的所有不可見項執行相同的過程。 \n This is also a useful option in order to also exclude large sensors or other items from the model bounding box. We now have following situation: 這也是一個有用的選項，可以將大型傳感器或其他項目也排除在模型邊界框之外。我們現在有以下情況： \n We now protect our model from accidental modification.  現在，我們保護模型免受意外修改。 \n We select all visible objects in the robot, then enable Select base of model instead: if we now click a visible link in the scene, the base of the robot will be selected instead. 我們選擇機器人中的所有可見對象，然後啟用“選擇模型的基礎”：如果現在單擊場景中的可見鏈接，則會改為選擇機器人的基礎。 \n This allows us to manipulate the model as if it was a single object. We can still select visible objects in the robot via control-shift-clicking in the scene, or by selecting the object in the scene hierarchy.  這使我們可以像對待單個對像一樣操作模型。我們仍然可以通過按住Shift鍵並單擊場景或在場景層次中選擇對象來選擇機器人中的可見對象。 \n We now put the robot into a correct default position/orientation. First, we save current scene as a reference (e.g. if at a later stage we need to import CAD data that have the same orientation at the curent robot).  現在，我們將機器人置於正確的默認位置/方向。首先，我們將當前場景保存為參考（例如，如果稍後需要在當前機器人上導入方向相同的CAD數據）。 \n Then we select the model and modify its position/orientation appropriately. It is considered good practice to position the model (i.e. its base object) at X=0 and Y=0. 然後，我們選擇模型並適當修改其位置/方向。將模型（即其基礎對象）定位在X = 0和Y = 0處被認為是一種好習慣。 \n Then we select the model and modify its position/orientation appropriately. 然後，我們選擇模型並適當修改其位置/方向。 \n It is considered good practice to position the model (i.e. its base object) at X=0 and Y=0. 將模型（即其基礎對象）定位在X = 0和Y = 0處被認為是一種好習慣。 \n We now run the simulation: the robot will collapse, since the joints are not controlled by default. 現在我們運行模擬：由於默認情況下關節不受控制，因此機器人將崩潰。 \n When we added the joints in the previous stage, we created joints in force/torque mode, but their motor or controller was disabled (by default). 在上一階段添加關節時，我們以力/扭矩模式創建了關節，但其電動機或控制器已禁用（默認情況下）。 \n We can now adjust our joints to our requirements. In our case, we want a simple PID controller for each one of them. 現在，我們可以根據需要調整關節。在我們的案例中，我們希望為每個控制器都提供一個簡單的PID控制器。 \n In the joint dynamic properties, we click Motor enabled and adjust the maximum torque.  在關節動態屬性中，單擊“啟用電機”並調整最大扭矩。 \n We then click Control loop enabled and select Position control (PID). We now run the simulation again: the robot should hold its position.  然後，單擊啟用控制環，然後選擇位置控制（PID）。現在，我們再次運行仿真：機器人應保持其位置。 \n Try to switch the current physics engine to see if the behaviour is consistent across all supported physics engines.  嘗試切換當前的物理引擎，以查看行為在所有受支持的物理引擎之間是否一致。 \n You can do this via the appropriate toolbar button, or in the general dynamics properties. 您可以通過相應的工具欄按鈕或在常規動力學屬性中執行此操作。 \n During simulation, we now verify the scene dynamic content via the Dynamic content visualization & verification toolbar button. 在仿真過程中，我們現在通過“動態內容可視化和驗證”工具欄按鈕來驗證場景動態內容。 \n Now, only items that are taken into account by the physics engine will be display, and the display is color-coded.  現在，將僅顯示物理引擎考慮的項目，並且該顯示使用顏色編碼。 \n \n Webots User Guide \n Now, changing the radius field of the first Sphere node also modifies its boundingObject. 現在，更改第一個Sphere節點的半徑字段也會修改其boundingObject。 \n For convenience, the boundingObject field accepts also the Shape node (rather than the Sphere node directly). It would be also possible to use the same DEF-USE mechanism at the Shape level as shown in this figure. 為了方便起見，boundingObject字段還接受Shape節點（而不是直接接受Sphere節點）。如圖所示，也可以在Shape級別使用相同的DEF-USE機制。 \n For now the greatest benefit is being able to also use this Shape directly for graphical purposes. Later this mechanism will turn out to be very useful for some sensors. 到目前為止，最大的好處就是也可以直接將此Shape用於圖形目的。後來，對於某些傳感器，該機制將變得非常有用。 \n on the Sphere node called BALL_GEOMETRY. 在名為BALL_GEOMETRY的Sphere節點上。 \n physics 物理 boundingObject children 孩子們 geometry 幾何 Solid 固體 Physics 物理 USE BALL_GEOMETRY 使用BALL_GEOMETRY Shape 形狀 DEF BALL_GEOMETRY Sphere DEF BALL_GEOMETRY球體 \n DEF-USE mechanism applied on the Shape node of a Solid. Hands-on #7: Create a second ball with the same parameters but using the Shape node (rather than the Sphere node directly) for the DEF-USE mechanism. \n 在實體的“形狀”節點上應用的DEF-USE機制。 動手練習7：使用DEF-USE機制的Shape節點（而不是直接使用Sphere節點）創建具有相同參數的第二個球。 \n \n 各組員獨立製作題 \n 影片網址: https://www.youtube.com/watch?v=ZlUL-lxG5uM&feature=youtu.be \n \n \n', 'tags': '', 'url': 'week15-18.html'}, {'title': '期末報告', 'text': '報告影片: \n \n', 'tags': '', 'url': '期末報告.html'}, {'title': 'note', 'text': '', 'tags': '', 'url': 'note.html'}, {'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n \n \xa0 \n \n \n \n \n \n \n', 'tags': '', 'url': 'Develop.html'}]};